// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v1.0.0
// - protoc             v5.28.0
// source: api.proto

package v1

import (
	context "context"
	http "github.com/xiak/grafana-app-with-backend/pkg/common/transport/http"
	binding "github.com/xiak/grafana-app-with-backend/pkg/common/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCopilotGetSecurityAbnormalUser = "/ads.service.copilot.v1.Copilot/GetSecurityAbnormalUser"
const OperationCopilotPromptSuggestion = "/ads.service.copilot.v1.Copilot/PromptSuggestion"

type CopilotHTTPServer interface {
	GetSecurityAbnormalUser(context.Context, *GetSecurityAbnormalUserRequest) (*GetSecurityAbnormalUserReply, error)
	PromptSuggestion(context.Context, *PromptSuggestionRequest) (*PromptSuggestionReply, error)
}

func RegisterCopilotHTTPServer(s *http.Server, srv CopilotHTTPServer) {
	r := s.Route("/")
	r.POST("/copilot/security/user", _Copilot_GetSecurityAbnormalUser0_HTTP_Handler(srv))
	r.POST("/copilot/prompt/suggestion", _Copilot_PromptSuggestion0_HTTP_Handler(srv))
}

func _Copilot_GetSecurityAbnormalUser0_HTTP_Handler(srv CopilotHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSecurityAbnormalUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCopilotGetSecurityAbnormalUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSecurityAbnormalUser(ctx, req.(*GetSecurityAbnormalUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSecurityAbnormalUserReply)
		return ctx.Result(200, reply)
	}
}

func _Copilot_PromptSuggestion0_HTTP_Handler(srv CopilotHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PromptSuggestionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCopilotPromptSuggestion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PromptSuggestion(ctx, req.(*PromptSuggestionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PromptSuggestionReply)
		return ctx.Result(200, reply)
	}
}
