// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package plugin

import (
	"github.com/gorilla/mux"
	"github.com/grafana/grafana-plugin-sdk-go/backend/log"
	"github.com/xiak/grafana-app-with-backend/pkg/internal/biz"
	"github.com/xiak/grafana-app-with-backend/pkg/internal/config"
	"github.com/xiak/grafana-app-with-backend/pkg/internal/data"
	"github.com/xiak/grafana-app-with-backend/pkg/internal/server"
	"github.com/xiak/grafana-app-with-backend/pkg/internal/service"
)

// Injectors from wire.go:

// wireApp init application.
func wireApp(confData *conf.Data, logger log.Logger) (*mux.Router, func(), error) {
	dataData, cleanup, err := data.NewData(logger)
	if err != nil {
		return nil, nil, err
	}
	systemSecurityRepo := data.NewSystemSecurityRepo(dataData, logger)
	systemSecurityUsercase := biz.NewSystemSecurityUsercase(systemSecurityRepo, logger)
	observabilityService := service.NewObservabilityService(systemSecurityUsercase, logger)
	httpServer := server.NewHTTPServer(logger, observabilityService)
	router := GetRouter(httpServer)
	return router, func() {
		cleanup()
	}, nil
}
